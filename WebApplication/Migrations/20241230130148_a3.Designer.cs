// <auto-generated />
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApp.Context;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241230130148_a3")]
    partial class a3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebApp.Models.BaseEntity", b =>
                {
                    b.Property<string>("BaseNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("BaseNumber");

                    b.ToTable("BaseEntities", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("WebApp.Models.DerivedEntityA", b =>
                {
                    b.HasBaseType("WebApp.Models.BaseEntity");

                    b.Property<string>("PropertyA")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.ComplexProperty<Dictionary<string, object>>("Money", "WebApp.Models.DerivedEntityA.Money#Money", b1 =>
                        {
                            b1.Property<string>("Count")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Count");

                            b1.Property<string>("MoneyString")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("MoneyString");
                        });

                    b.ToTable("DerivedEntitiesA", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.DerivedEntityC", b =>
                {
                    b.HasBaseType("WebApp.Models.BaseEntity");

                    b.Property<string>("PropertyC")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.ComplexProperty<Dictionary<string, object>>("Money", "WebApp.Models.DerivedEntityC.Money#Money", b1 =>
                        {
                            b1.Property<string>("Count")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Count");

                            b1.Property<string>("MoneyString")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("MoneyString");
                        });

                    b.ToTable("DerivedEntitiesC", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.DerivedEntityB", b =>
                {
                    b.HasBaseType("WebApp.Models.DerivedEntityA");

                    b.Property<string>("PropertyB")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.ToTable("DerivedEntitiesB", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.DerivedEntityA", b =>
                {
                    b.HasOne("WebApp.Models.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("WebApp.Models.DerivedEntityA", "BaseNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("WebApp.Models.Point", "Point", b1 =>
                        {
                            b1.Property<string>("DerivedEntityABaseNumber")
                                .HasColumnType("text");

                            b1.Property<int>("Id")
                                .HasColumnType("integer")
                                .HasColumnName("Id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Value");

                            b1.HasKey("DerivedEntityABaseNumber");

                            b1.ToTable("DerivedEntitiesA");

                            b1.WithOwner()
                                .HasForeignKey("DerivedEntityABaseNumber");
                        });

                    b.Navigation("Point");
                });

            modelBuilder.Entity("WebApp.Models.DerivedEntityC", b =>
                {
                    b.HasOne("WebApp.Models.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("WebApp.Models.DerivedEntityC", "BaseNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("WebApp.Models.Point", "Point", b1 =>
                        {
                            b1.Property<string>("DerivedEntityCBaseNumber")
                                .HasColumnType("text");

                            b1.Property<int>("Id")
                                .HasColumnType("integer")
                                .HasColumnName("Id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Value");

                            b1.HasKey("DerivedEntityCBaseNumber");

                            b1.ToTable("DerivedEntitiesC");

                            b1.WithOwner()
                                .HasForeignKey("DerivedEntityCBaseNumber");
                        });

                    b.Navigation("Point");
                });

            modelBuilder.Entity("WebApp.Models.DerivedEntityB", b =>
                {
                    b.HasOne("WebApp.Models.DerivedEntityA", null)
                        .WithOne()
                        .HasForeignKey("WebApp.Models.DerivedEntityB", "BaseNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
